<?php
/**
 * Created by Malik Abiola.
 * Date: 02/02/2016
 * Time: 02:06
 * IDE: PhpStorm
 */

namespace MAbiola\Paystack\Tests;


use MAbiola\Paystack\Exceptions\PaystackNotFoundException;
use MAbiola\Paystack\Exceptions\PaystackUnauthorizedException;
use MAbiola\Paystack\Exceptions\PaystackUnsupportedOperationException;
use MAbiola\Paystack\Exceptions\PaystackValidationException;
use MAbiola\Paystack\Factories\PaystackHttpClientFactory;
use MAbiola\Paystack\Helpers\Transaction;
use MAbiola\Paystack\Models\Customer;
use MAbiola\Paystack\Models\Plan;
use MAbiola\Paystack\Paystack;
use MAbiola\Paystack\Repositories\CustomerResource;
use MAbiola\Paystack\Repositories\PlanResource;
use MAbiola\Paystack\Repositories\TransactionResource;

class PaystackLibTest extends BaseTestCase
{
    private $paystack;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->paystack = Paystack::make();
        $this->paystackHttpClient = PaystackHttpClientFactory::make();
        $this->customerResource = new CustomerResource($this->paystackHttpClient);
        $this->planResource = new PlanResource($this->paystackHttpClient);
        $this->transactionResource = new TransactionResource($this->paystackHttpClient);
    }

    public function testGetCustomerByIdReturnsCustomer()
    {
        //mock customer resource
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('get')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customerRetrievedResponseData);
        //create new customer model
        $customerModel = new Customer($mockCustomerResource);
        //set customer model to customer model with mocked customer resource
        $this->paystack->setCustomerModel($customerModel);
        //check response
        $retrievedCustomer = $this->paystack->getCustomer($this->customerCreateResponseData['customer_code']);
        $this->assertTrue(is_array($retrievedCustomer->toArray()));
        $this->assertInstanceOf(Customer::class, $retrievedCustomer);
        $this->assertEquals($this->customerData['first_name'], $retrievedCustomer->get('first_name'));
        $this->assertEquals($this->customerData['last_name'], $retrievedCustomer->get('last_name'));
        $this->assertEquals($this->customerData['email'], $retrievedCustomer->get('email'));
        $this->assertEquals($this->customerData['phone'], $retrievedCustomer->get('phone'));
    }

    public function testGetCustomerByIdReturnsException()
    {
        //mock customer resource
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('get')
            ->withAnyArgs()
            ->once()
            ->andReturn(new \Exception());
        //create new customer model
        $customerModel = new Customer($mockCustomerResource);
        //set customer model to customer model with mocked customer resource
        $this->paystack->setCustomerModel($customerModel);

        //check response
        $this->setExpectedException(\Exception::class);
        $this->paystack->getCustomer($this->customerCreateResponseData['customer_code']);
    }

    public function testGetAllCustomersReturnsCustomers()
    {
        //mock customer resource
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('getAll')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customersRetrievedResponseData);

        $this->paystack->setCustomerResource($mockCustomerResource);

        $retrievedCustomers = $this->paystack->getCustomers();
        //check assertions
        $this->assertTrue(is_array($retrievedCustomers));
        $this->assertGreaterThanOrEqual(1, $retrievedCustomers);
        $this->assertInstanceOf(Customer::class, $retrievedCustomers[0]);
        $this->assertTrue(is_array($retrievedCustomers[0]->toArray()));
        $this->assertArrayHasKey('email', $retrievedCustomers[0]->toArray());
    }

    public function testGetAllCustomersReturnsError()
    {
        //mock customer resource
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('getAll')
            ->withAnyArgs()
            ->once()
            ->andReturn(new \Exception());
        //set customer model to customer model with mocked customer resource
        $this->paystack->setCustomerResource($mockCustomerResource);
        //set expected exception
        $this->setExpectedException(\Exception::class);
        $retrievedCustomers = $this->paystack->getCustomers();
        var_dump($retrievedCustomers);
    }

    public function testCreateCustomerCreatesCustomerSuccessfully()
    {
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('save')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customerCreateResponseData);

        $customerModel = new Customer($mockCustomerResource);
        $this->paystack->setCustomerModel($customerModel);
        $createdCustomer = $this->paystack->createCustomer(
            $this->customerData['first_name'],
            $this->customerData['last_name'],
            $this->customerData['email'],
            $this->customerData['phone']
        );

        $this->assertInstanceOf(Customer::class, $createdCustomer);
        $this->assertEquals($this->customerData['first_name'], $createdCustomer->get('first_name'));
        $this->assertEquals($this->customerData['last_name'], $createdCustomer->get('last_name'));
        $this->assertEquals($this->customerData['email'], $createdCustomer->get('email'));
        $this->assertEquals($this->customerData['phone'], $createdCustomer->get('phone'));
    }

    public function testCreateCustomerReturnsException()
    {
        $this->setExpectedException(PaystackValidationException::class);
        $this->paystack->createCustomer('','','','');
    }

    public function testUpdateCustomerReturnsCustomer()
    {
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('get')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customerRetrievedResponseData);

        $mockCustomerResource->shouldReceive('update')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customerUpdatedResponseData);

        $this->paystack->setCustomerModel(new Customer($mockCustomerResource));

        $updatedCustomer = $this->paystack->updateCustomerData(
            $this->customerCreateResponseData['customer_code'],
            ['last_name' => 'new_last_name']
        );

        $this->assertInstanceOf(Customer::class, $updatedCustomer);
        $this->assertEquals('new_last_name', $updatedCustomer->get('last_name'));
    }

    public function testUpdateCustomerReturnsException()
    {
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('get')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customerRetrievedResponseData);

        $mockCustomerResource->shouldReceive('update')
            ->withAnyArgs()
            ->once()
            ->andReturn(new \Exception());

        $this->paystack->setCustomerModel(new Customer($mockCustomerResource));
        $this->setExpectedException(\Exception::class);
        $updatedCustomer = $this->paystack->updateCustomerData(
            $this->customerCreateResponseData['customer_code'],
            ['last_name' => 'new_last_name']
        );
    }

    public function testDeleteCustomerReturnsException()
    {
        $mockCustomerResource = \Mockery::mock($this->customerResource)->makePartial();
        $mockCustomerResource->shouldReceive('get')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->customerRetrievedResponseData);

        $this->paystack->setCustomerModel(new Customer($mockCustomerResource));
        $this->setExpectedException(PaystackUnsupportedOperationException::class);
        $this->paystack->deleteCustomer($this->customerCreateResponseData['customer_code']);
    }

    public function testGetPlanReturnsPlanObject()
    {
        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('get')->withAnyArgs()->andReturn($this->planRetrievedResourceResponseData);

        $this->paystack->setPlanModel(new Plan($mockPlanResource));
        $retrievedPlan = $this->paystack->getPlan($this->planRetrievedResourceResponseData['plan_code']);

        $this->assertInstanceOf(Plan::class, $retrievedPlan);
        $this->assertArraySubset($this->planData, $retrievedPlan->get(['name', 'description', 'amount', 'currency']));
    }

    public function testGetPlanReturnsException()
    {
        $errorResponse = new \stdClass();
        $errorResponse->message = "Paystack Validation Exception";

        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('get')
            ->withAnyArgs()
            ->andReturn(
                new PaystackValidationException(
                    $errorResponse,
                    400
                )
            );
        $this->paystack->setPlanModel(new Plan($mockPlanResource));

        $this->setExpectedException(PaystackValidationException::class);
        $retrievedPlan = $this->paystack->getPlan($this->planRetrievedResourceResponseData['plan_code']);
    }

    public function testGetPlansReturnsPlans()
    {
        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('getAll')->withAnyArgs()->andReturn($this->plansRetrievedResourceResponseData);

        $this->paystack->setPlanResource($mockPlanResource);

        $retrievedPlans = $this->paystack->getPlans();
        $this->assertGreaterThanOrEqual(1, count($retrievedPlans));
        $this->assertInstanceOf(Plan::class, $retrievedPlans[0]);
        $this->assertTrue(is_array($retrievedPlans[0]->get(['name', 'description', 'amount', 'currency'])));
        $this->assertTrue(is_array($retrievedPlans[0]->toArray()));
        $this->assertArrayHasKey('name', $retrievedPlans[0]->get(['name', 'description', 'amount', 'currency']));
        $this->assertArrayHasKey('description', $retrievedPlans[0]->get(['name', 'description', 'amount', 'currency']));
        $this->assertArrayHasKey('amount', $retrievedPlans[0]->get(['name', 'description', 'amount', 'currency']));
        $this->assertArrayHasKey('currency', $retrievedPlans[0]->get(['name', 'description', 'amount', 'currency']));
    }

    public function testGetPlansReturnsError()
    {
        $this->planResource = new PlanResource(PaystackHttpClientFactory::make($this->fakeAuthHeader));
        $this->paystack->setPlanResource($this->planResource);

        $this->setExpectedException(PaystackUnauthorizedException::class);
        $retrievedPlans = $this->paystack->getPlans();
    }

    public function testCreatePlanReturnsPlan()
    {
        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('save')->withAnyArgs()->andReturn($this->planCreatedResourceResponseData);

        $this->paystack->setPlanModel(new Plan($mockPlanResource));
        $createdPlan = $this->paystack->createPlan(
            $this->planData['name'],
            $this->planData['description'],
            $this->planData['amount'],
            $this->planData['currency']
        )->save();

        $this->assertInstanceOf(Plan::class, $createdPlan);
        $this->assertArraySubset($this->planData, $createdPlan->get(['name', 'description', 'amount', 'currency']));
    }

    public function testCreatePlanReturnsException()
    {
        $this->paystack->setPlanModel(new Plan($this->planResource));
        $this->setExpectedException(PaystackValidationException::class);
        $createdPlan = $this->paystack->createPlan('','','','')->save();
    }

    public function testUpdatePlanReturnsUpdatedPlan()
    {
        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('get')->withAnyArgs()->andReturn($this->planRetrievedResourceResponseData);
        $mockPlanResource->shouldReceive('update')->withAnyArgs()->andReturn($this->planUpdatedResourceResponseData);

        $this->paystack->setPlanModel(new Plan($mockPlanResource));
        $updatedPlan = $this->paystack->updatePlan(
            $this->planRetrievedResourceResponseData['plan_code'],
            ['description' => 'new plan description']
        );

        $this->assertInstanceOf(Plan::class, $updatedPlan);
        $this->assertEquals('new plan description', $updatedPlan->get('description'));
    }

    public function testUpdatePlanThrowsException()
    {
        $errorResponse = new \stdClass();
        $errorResponse->message = "Paystack Validation Exception";

        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('get')->withAnyArgs()->andReturn($this->planRetrievedResourceResponseData);
        $mockPlanResource->shouldReceive('update')->withAnyArgs()->andReturn(
            new PaystackValidationException(
                $errorResponse,
                400
            )
        );

        $this->paystack->setPlanModel(new Plan($mockPlanResource));
        $this->setExpectedException(PaystackValidationException::class);
        $updatedPlan = $this->paystack->updatePlan(
            $this->planRetrievedResourceResponseData['plan_code'],
            ['description' => 'new plan description']
        );
    }

    public function testDeletePlanThrowsException()
    {
        $mockPlanResource = \Mockery::mock($this->planResource)->makePartial();
        $mockPlanResource->shouldReceive('get')->withAnyArgs()->andReturn($this->planRetrievedResourceResponseData);

        $this->paystack->setPlanModel(new Plan($mockPlanResource));

        $this->setExpectedException(PaystackUnsupportedOperationException::class);
        $retrievedPlan = $this->paystack->deletePlan($this->planRetrievedResourceResponseData['plan_code']);
    }

    public function testStartOneTimeTransactionSuccessful()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('initialize')
            ->once()
            ->andReturn($this->initOneTimeTransactionResourceResponseData);
        $this->paystack->setTransactionResource($mockTransactionResource);

        $initOneTimeTransaction = $this->paystack->startOneTimeTransaction(
            $this->planData['amount'],
            $this->customerData['email'],
            ''
        );
        $this->assertEquals($this->initOneTimeTransactionResourceResponseData, $initOneTimeTransaction);
    }

    public function testStartOneTimeTransactionReturnsError()
    {
        $this->setExpectedException(PaystackValidationException::class);
        $initOneTimeTransaction = $this->paystack->startOneTimeTransaction('', '', '');

    }

    public function testReturningTransactionSuccessful()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('chargeAuthorization')
            ->once()
            ->andReturn($this->chargeReturningTransactionResourceResponseData);

        $this->paystack->setTransactionResource($mockTransactionResource);

        $chargeReturningTransaction = $this->paystack->chargeReturningTransaction(
            "AUTH_jonwwppn",
            $this->planData['amount'],
            $this->customerData['email'],
            ''
        );

        $this->assertEquals($this->chargeReturningTransactionResourceResponseData, $chargeReturningTransaction);
    }

    public function testReturningTransactionReturnsError()
    {
        $this->setExpectedException(PaystackValidationException::class);
        $chargeReturningTransaction = $this->paystack->chargeReturningTransaction('', '', '', '');
    }

    public function testVerifyTransactionSuccessful()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('verify')
            ->once()
            ->andReturn($this->verifyTransactionResponseData);

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $verify = $this->paystack->verifyTransaction($this->initOneTimeTransactionResourceResponseData['reference']);

        $this->assertTrue(is_array($verify));
        $this->assertArrayHasKey('customer', $verify);
        $this->assertArrayHasKey('amount', $verify);
        $this->assertArrayHasKey('plan', $verify);
    }

    public function testVerifyTransactionThrowsException()
    {
        $this->transactionResource = new TransactionResource(PaystackHttpClientFactory::make($this->fakeAuthHeader));
        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($this->transactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $this->setExpectedException(PaystackUnauthorizedException::class);
        $verify = $this->paystack->verifyTransaction($this->initOneTimeTransactionResourceResponseData['reference']);
    }

    public function testVerifyTransactionNotSuccessful()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('verify')
            ->once()
            ->andReturn(['status' => 'unsuccessful']);

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $verify = $this->paystack->verifyTransaction($this->initOneTimeTransactionResourceResponseData['reference']);
        $this->assertFalse($verify);
    }

    public function testGetTransactionDetailsReturnsTransactionDetails()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('get')
            ->once()
            ->andReturn($this->transactionDetailsResponseData);

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $transaction =  $this->paystack->transactionDetails('9663');

        $this->assertInstanceOf(\MAbiola\Paystack\Models\Transaction::class, $transaction);
        $this->assertEquals($this->transactionDetailsResponseData['reference'], $transaction->get('reference'));

        $this->assertTrue(is_array($transaction->_toArray()));
    }

    public function testGetTransactionDetailsThrowsException()
    {
        $invalidResponse = new \stdClass();
        $invalidResponse->message = "Transaction Not Found";

        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('get')
            ->once()
            ->andReturn(new PaystackNotFoundException($invalidResponse, 404));

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);

        $this->paystack->setTransactionHelper($transactionHelper);

        $this->setExpectedException(PaystackNotFoundException::class);
        $this->paystack->transactionDetails('9663');
    }

    public function testGetAllTransactionsReturnsTransactions()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('getAll')
            ->withAnyArgs()
            ->once()
            ->andReturn($this->allTransactionsResponseData);

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $allTransactions = $this->paystack->allTransactions();

        $this->assertTrue(is_array($allTransactions));
        $this->assertCount(4, $allTransactions);
        $this->assertInstanceOf(\MAbiola\Paystack\Models\Transaction::class, $allTransactions[0]);
        $this->assertArrayHasKey('customer', $allTransactions[0]->get(['customer']));
    }

    public function testGetAllTransactionsReturnsException()
    {
        $invalidResponse = new \stdClass();
        $invalidResponse->message = "Transaction Not Found";

        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('getAll')
            ->withAnyArgs()
            ->once()
            ->andReturn(new PaystackNotFoundException($invalidResponse, 404));

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $this->setExpectedException(PaystackNotFoundException::class);
        $this->paystack->allTransactions();
    }

    public function testGetTotalsReturnsTotals()
    {
        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('getTransactionTotals')
            ->once()
            ->andReturn($this->transactionTotalsResponseData);

        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $transactionTotals = $this->paystack->transactionsTotals();

        $this->assertTrue(is_array($transactionTotals));
        $this->assertArrayHasKey('total_volume', $transactionTotals);
        $this->assertArrayHasKey('total_transactions', $transactionTotals);
        $this->assertArrayHasKey('pending_transfers', $transactionTotals);
        $this->assertEquals($this->transactionTotalsResponseData['total_transactions'], $transactionTotals['total_transactions']);
    }

    public function testGetTotalsThrowExceptions()
    {
        $invalidResponse = new \stdClass();
        $invalidResponse->message = "Authorization Not Found";

        $mockTransactionResource = \Mockery::mock($this->transactionResource)->makePartial();
        $mockTransactionResource->shouldReceive('getTransactionTotals')
            ->once()
            ->andReturn(new PaystackUnauthorizedException($invalidResponse, 401));

        $this->setExpectedException(PaystackUnauthorizedException::class);
        $transactionHelper = Transaction::make();
        $transactionHelper->setTransactionResource($mockTransactionResource);
        $this->paystack->setTransactionHelper($transactionHelper);

        $this->paystack->transactionsTotals();
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
